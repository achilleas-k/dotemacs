#+TITLE: DotEmacs
#+AUTHOR: Mathieu Marques

* Table of Content                                                      :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#use-better-defaults][Use better defaults]]
  - [[#load-customel][Load =.custom.el=]]
  - [[#load-secretel][Load =.secret.el=]]
- [[#theme][Theme]]
- [[#languages][Languages]]
  - [[#css][CSS]]
  - [[#csv][CSV]]
  - [[#docker][Docker]]
  - [[#html][HTML]]
  - [[#javascript][JavaScript]]
  - [[#json][JSON]]
  - [[#lisp][Lisp]]
  - [[#markdown][Markdown]]
  - [[#org][Org]]
  - [[#yaml][YAML]]
- [[#features][Features]]
  - [[#auto-completion][Auto-Completion]]
  - [[#buffers-and-windows][Buffers and Windows]]
  - [[#comments][Comments]]
  - [[#customization-menus][Customization Menus]]
  - [[#daemon][Daemon]]
  - [[#dictionary][Dictionary]]
  - [[#diff][Diff]]
  - [[#dired][Dired]]
  - [[#evil][Evil]]
  - [[#expand][Expand]]
  - [[#help][Help]]
  - [[#ivy][Ivy]]
  - [[#hydra][Hydra]]
  - [[#irc][IRC]]
  - [[#linters][Linters]]
  - [[#mode-line][Mode-Line]]
  - [[#navigation][Navigation]]
  - [[#os-specific][OS-Specific]]
  - [[#parentheses][Parentheses]]
  - [[#paste][Paste]]
  - [[#point-and-region][Point and Region]]
  - [[#projectile][Projectile]]
  - [[#quality-of-life][Quality of Life]]
  - [[#shell-and-terminal][Shell and Terminal]]
  - [[#version-control][Version Control]]
  - [[#whitespaces][Whitespaces]]

* Bootstrap

** Use better defaults

Some UI elements are rather invasive. No-mouse master race.

#+BEGIN_SRC emacs-lisp
(when window-system
  (blink-cursor-mode 0)                           ; Disable the cursor blinking
  (scroll-bar-mode 0)                             ; Disable the scroll bar
  (tool-bar-mode 0)                               ; Disable the tool bar
  (tooltip-mode 0))                               ; Disable the tooltips
#+END_SRC

Here are what I consider better defaults as per my own experience.

#+BEGIN_SRC emacs-lisp
(setq-default
 ad-redefinition-action 'accept                   ; Silence warnings for redefinition
 auto-save-list-file-prefix nil                   ; Prevent tracking for auto-saves
 confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
 cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
 delete-by-moving-to-trash t                      ; Delete files to trash
 display-line-numbers 'relative                   ; Display relative line numbers on the left
 display-line-numbers-current-absolute nil        ; Current line is 0
 display-time-default-load-average nil            ; Don't display load average
 display-time-format "%H:%M"                      ; Format the time string
 fill-column 80                                   ; Set width for automatic line breaks
 help-window-select t                             ; Focus new help windows when opened
 indent-tabs-mode nil                             ; Stop using tabs to indent
 inhibit-startup-screen t                         ; Disable start-up screen
 initial-scratch-message ""                       ; Empty the initial *scratch* buffer
 mouse-yank-at-point t                            ; Yank at point rather than pointer
 ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
 recenter-positions '(5 top bottom)               ; Set re-centering positions
 scroll-conservatively most-positive-fixnum       ; Always scroll by one line
 scroll-margin 4                                  ; Add a margin when scrolling vertically
 select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
 sentence-end-double-space nil                    ; End a sentence after a dot and a space
 show-help-function nil                           ; Disable help messages
 show-trailing-whitespace nil                     ; Display trailing whitespaces
 split-height-threshold nil                       ; Disable vertical window splitting
 split-width-threshold nil                        ; Disable horizontal window splitting
 tab-width 4                                      ; Set width for tabs
 uniquify-buffer-name-style 'forward              ; Uniquify buffer names
 window-combination-resize t                      ; Resize windows proportionally
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width
(cd "~/")                                         ; Move to the user directory
(delete-selection-mode 1)                         ; Replace region when inserting text
(display-time-mode 1)                             ; Enable time in the mode-line
(fringe-mode 0)                                   ; Disable fringes
(fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
(global-subword-mode 1)                           ; Iterate through CamelCase words
(menu-bar-mode 0)                                 ; Disable the menu bar
(mouse-avoidance-mode 'exile)                     ; Avoid collision of mouse with point
(put 'downcase-region 'disabled nil)              ; Enable downcase-region
(put 'upcase-region 'disabled nil)                ; Enable upcase-region
(set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
#+END_SRC

Enable fullscreen.

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'ns)
    (toggle-frame-maximized)
  (toggle-frame-fullscreen))
#+END_SRC

Garbage-collect on focus-out, Emacs /should/ feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

** Load =.custom.el=

One is able to use the customization interface that is bundled within Emacs. It
is meant to help people who are not familiar with Emacs Lisp in the
configuration of Emacs itself. By default, changes in the customization will be
automatically detected and appended at the end of the configuration file,
=init.el=.

Since that in my case, the actual configuration file is a new one, crafted by
=org-mode=, adding code at the end of =init.el= might mess things up. The
following tells Emacs to add extra code in another file that would be then
loaded, if existing.

#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

** Load =.secret.el=

I load =~/.emacs.d/.secret.el= to keep sensible things out of version control.
For instance, you could set your identity by customizing both =user-full-name=
and =user-mail-address=. This is also where you want your API tokens to live.

#+BEGIN_SRC emacs-lisp
(defvar me/erc-nick               nil        "The ERC nick to use.")
(defvar me/erc-password           nil        "The ERC password to use.")
(defvar me/erc-port               nil        "The ERC port to use.")
(defvar me/erc-server             nil        "The ERC server to use.")
(defvar me/font-family            "Courier"  "The font to use.")
(defvar me/font-size-default      110        "The font size to use for default text.")
(defvar me/font-size-large        1.2        "The font size to use for larger text.")
(defvar me/font-size-small        0.8        "The font size to use for smaller text.")

(let ((secret.el (expand-file-name ".secret.el" user-emacs-directory)))
  (when (file-exists-p secret.el)
    (load secret.el)))
#+END_SRC

* Theme

Load the theme and fix some high-level faces to match my personal preferences.

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :demand t
  :custom
  (doom-themes-enable-bold nil)
  :config
  (load-theme 'doom-one t)
  (doom-themes-org-config)
  (doom-themes-visual-bell-config)
  (doom-themes-set-faces nil
    '(default :font me/font-family :height me/font-size-default)
    '(doom-modeline-bar :background 'unspecified)
    '(flycheck-error :underline `(:color ,error :style line))
    '(flycheck-info :underline `(:color ,highlight :style line))
    '(flycheck-warning :underline `(:color ,warning :style line))
    '(font-lock-doc-face :italic t)
    '(helpful-heading :foreground red :height me/font-size-large)
    '(info-title-4 :bold nil :foreground red)
    '(isearch :inherit 'highlight)
    '(ivy-virtual :italic nil)
    '(lazy-highlight :foreground blue)
    '(magit-diff-added :background 'unspecified)
    '(magit-diff-hunk-region :inherit 'region)
    '(magit-diff-removed :background 'unspecified)
    '(magit-section-heading :foreground red :height me/font-size-large)
    '(markdown-table-face :height me/font-size-small)
    '(mode-line-inactive :background base3)
    '(org-block-begin-line :background 'unspecified)
    '(org-quote :inherit 'font-lock-doc-face)
    '(outline-1 :foreground red)
    '(swiper-background-match-face-1 :background 'unspecified)
    '(swiper-line-face :extend t)
    '(swiper-match-face-1 :background 'unspecified :foreground 'unspecified)
    '(tooltip :background base2)
    '(variable-pitch :family 'unspecified)
    '(which-key-command-description-face :foreground 'unspecified)))
#+END_SRC

* Languages

** CSS

#+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :custom (css-indent-offset 2))

(use-package scss-mode
  :ensure nil
  :preface
  (defun me/scss-set-comment-style ()
    (setq-local comment-end "")
    (setq-local comment-start "//"))
  :mode ("\\.sass\\'" "\\.scss\\'")
  :hook (scss-mode . me/scss-set-comment-style))
#+END_SRC

** CSV

#+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :config (setq-default csv-align-padding 2))
#+END_SRC

** Docker

#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode :mode "Dockerfile\\'")
#+END_SRC

** HTML

HTML mode is defined in =sgml-mode.el=.

#+BEGIN_SRC emacs-lisp
(use-package sgml-mode
  :ensure nil
  :preface
  (defun me/html-set-pretty-print-function ()
    (setq me/pretty-print-function #'sgml-pretty-print))
  :hook
  ((html-mode . me/html-set-pretty-print-function)
   (html-mode . sgml-electric-tag-pair-mode)
   (html-mode . sgml-name-8bit-mode)
   (html-mode . toggle-truncate-lines))
  :custom
  (sgml-basic-offset 2))
#+END_SRC

** JavaScript

#+BEGIN_SRC emacs-lisp
(use-package js
  :ensure nil
  :custom
  (js-indent-level 2))

(use-package js-doc)

(use-package js2-mode
  :ensure nil
  :bind (:map js2-mode-map ([remap comment-indent-new-line] . js2-line-break))
  :custom
  (js2-idle-timer-delay 0)
  (js2-mode-show-parse-errors nil)
  (js2-mode-show-strict-warnings nil))

(use-package rjsx-mode
  :mode "\\.js\\'"
  :preface
  (defun me/rjsx-set-ongoing-hydra-body ()
    (setq me/ongoing-hydra-body #'hydra-rjsx/body))
  (defun me/rjsx-set-pretty-print-function ()
    (setq me/pretty-print-function #'sgml-pretty-print))
  :hook
  ((rjsx-mode . me/aggressive-indent-mode-off)
   (rjsx-mode . me/rjsx-set-ongoing-hydra-body)
   (rjsx-mode . me/rjsx-set-pretty-print-function)
   (rjsx-mode . sgml-electric-tag-pair-mode)
   (rjsx-mode . turn-off-auto-fill)))

(use-package tide
  :preface
  (defun me/tide-set-ongoing-hydra-body ()
    (setq me/ongoing-hydra-body #'hydra-tide/body))
  :hook
  (tide-mode . me/tide-set-ongoing-hydra-body))

(use-package web-mode
  :mode "\\.tsx\\'"
  :hook (web-mode . tide-setup)
  :custom
  (web-mode-code-indent-offset 2)
  (web-mode-markup-indent-offset 2)
  (web-mode-enable-auto-indentation nil))
#+END_SRC

** JSON

- *TOFIX*: Indent level is broken (https://github.com/joshwnj/json-mode/issues/32).

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :preface
  (defun me/json-set-indent-level ()
    (setq-local js-indent-level 2))
  :hook
  (json-mode . me/json-set-indent-level))
#+END_SRC

** Lisp

#+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :preface
  (defun me/markdown-set-ongoing-hydra-body ()
    (setq me/ongoing-hydra-body #'hydra-markdown/body))
  :mode
  ("INSTALL\\'"
   "CONTRIBUTORS\\'"
   "LICENSE\\'"
   "README\\'"
   "\\.markdown\\'"
   "\\.md\\'")
  :hook
  (markdown-mode . me/markdown-set-ongoing-hydra-body)
  :custom
  (markdown-asymmetric-header t)
  (markdown-split-window-direction 'right)
  :config
  (unbind-key "M-<down>" markdown-mode-map)
  (unbind-key "M-<up>" markdown-mode-map))
#+END_SRC

** Org

This very file is organized with =org-mode=. I am definitely not a power user of
Org, but I'm getting there. :-)

#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

[[http://orgmode.org/][Carsten Dominik]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :preface
  (defun me/org-src-buffer-name (org-buffer-name language)
    "Construct the buffer name for a source editing buffer. See
`org-src--construct-edit-buffer-name'."
    (format "*%s*" org-buffer-name))
  (defun me/org-set-ongoing-hydra-body ()
    (setq me/ongoing-hydra-body #'hydra-org/body))
  :bind
  (:map org-mode-map
        ([remap backward-paragraph] . me/backward-paragraph-dwim)
        ([remap forward-paragraph] . me/forward-paragraph-dwim)
        ("<C-return>" . nil)
        ("<C-S-down>" . nil)
        ("<C-S-up>" . nil)
        ("<M-S-down>" . nil)
        ("<M-S-up>" . nil))
  :hook
  ((org-mode . me/org-set-ongoing-hydra-body)
   (org-mode . toc-org-enable))
  :custom
  (org-adapt-indentation nil)
  (org-descriptive-links nil)
  (org-edit-src-content-indentation 0)
  (org-edit-src-persistent-message nil)
  (org-fontify-done-headline t)
  (org-hide-leading-stars nil)
  (org-src-window-setup 'current-window)
  (org-startup-folded nil)
  (org-startup-truncated nil)
  (org-support-shift-select 'always)
  :config
  (modify-syntax-entry ?' "'" org-mode-syntax-table)
  (advice-add 'org-src--construct-edit-buffer-name :override #'me/org-src-buffer-name))
#+END_SRC

Tired of having to manually update your tables of contents? This package will
maintain a TOC at the first heading that has a =:TOC:= tag.

#+BEGIN_SRC emacs-lisp
(use-package toc-org :after org)
#+END_SRC

** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode :mode "\\.yml\\'")
#+END_SRC

* Features

** Auto-Completion

Auto-completion at point. Display a small pop-in containing the candidates.

#+BEGIN_QUOTE
Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

[[http://company-mode.github.io/][Dmitry Gutov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package company
  :hook
  (after-init . global-company-mode)
  :custom
  (company-dabbrev-downcase nil)
  (company-dabbrev-ignore-case nil)
  (company-dabbrev-other-buffers nil)
  (company-global-modes '(not help-mode message-mode))
  (company-idle-delay .2)
  (company-minimum-prefix-length 1)
  (company-require-match 'never)
  (company-tooltip-align-annotations t)
  (company-tooltip-flip-when-above t)
  :config
  (company-tng-configure-default))
#+END_SRC

#+BEGIN_SRC emacs-lisp :lexical t
(use-package company-box
  :disabled t  ;; NOTE: See https://github.com/sebastiencs/company-box/pull/106
  :after company
  :defer nil
  :hook
  (company-mode . company-box-mode)
  :custom
  (company-box-icons-all-the-icons
   (let ((all-the-icons-default-adjust -.22)
         (all-the-icons-scale-factor .8)
         (blue 'all-the-icons-blue)
         (green 'all-the-icons-gree)
         (maroon 'all-the-icons-maroon)
         (pink 'all-the-icons-pink)
         (purple 'all-the-icons-purple)
         (red 'all-the-icons-red))
     `((Class         . ,(all-the-icons-material "class"                    :face red))
       (Color         . ,(all-the-icons-material "palette"                  :face red))
       (Constant      . ,(all-the-icons-material "pause_circle_filled"      :face blue))
       (Constructor   . ,(all-the-icons-material "functions"                :face red))
       (Enum          . ,(all-the-icons-material "plus_one"                 :face blue))
       (EnumMember    . ,(all-the-icons-material "people"                   :face blue))
       (Event         . ,(all-the-icons-material "event"                    :face red))
       (Field         . ,(all-the-icons-material "functions"                :face red))
       (File          . ,(all-the-icons-material "insert_drive_file"        :face pink))
       (Folder        . ,(all-the-icons-material "folder"                   :face maroon))
       (Function      . ,(all-the-icons-material "functions"                :face red))
       (Interface     . ,(all-the-icons-material "settings_input_component" :face red))
       (Keyword       . ,(all-the-icons-material "filter_center_focus"      :face red))
       (Method        . ,(all-the-icons-material "functions"                :face red))
       (Module        . ,(all-the-icons-material "view_module"              :face red))
       (Operator      . ,(all-the-icons-material "control_point"            :face red))
       (Property      . ,(all-the-icons-material "settings"                 :face red))
       (Reference     . ,(all-the-icons-material "collections_bookmark"     :face red))
       (Snippet       . ,(all-the-icons-material "short_text"               :face pink))
       (Struct        . ,(all-the-icons-material "streetview"               :face blue))
       (Template      . ,(all-the-icons-material "short_text"               :face green))
       (Text          . ,(all-the-icons-material "text_fields"              :face green))
       (TypeParameter . ,(all-the-icons-material "class"                    :face red))
       (Unit          . ,(all-the-icons-material "straighten"               :face red))
       (Unknown       . ,(all-the-icons-material "find_in_page"             :face purple))
       (Value         . ,(all-the-icons-material "filter_1"                 :face red))
       (Variable      . ,(all-the-icons-material "adjust"                   :face blue)))))
  (company-box-icons-alist 'company-box-icons-all-the-icons)
  (company-box-max-candidates 50)
  (company-box-scrollbar nil)
  (company-box-show-single-candidate 'always))
#+END_SRC

** Buffers and Windows

Don't ask before killing a buffer. I'm a consenting adult.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap kill-buffer] #'kill-this-buffer)
#+END_SRC

Allow repeated use of =←= and =→= when using =previous-buffer= and
=next-buffer=.

- *TODO*: Make a hydra.

#+BEGIN_SRC emacs-lisp
(defun me/switch-to-buffer-continue (&rest _)
  "Activate a sparse keymap:
  <left>   `previous-buffer'
  <right>  `next-buffer'"
  (set-transient-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "<left>") #'previous-buffer)
     (define-key map (kbd "<right>") #'next-buffer)
     map)))
(advice-add 'previous-buffer :after #'me/switch-to-buffer-continue)
(advice-add 'next-buffer :after #'me/switch-to-buffer-continue)
#+END_SRC

Save and restore Emacs status, including buffers, point and window configurations.

#+BEGIN_SRC emacs-lisp
(use-package desktop
  :ensure nil
  :hook
  (after-init . desktop-read)
  (after-init . desktop-save-mode)
  :custom
  (desktop-base-file-name ".desktop")
  (desktop-base-lock-name ".desktop.lock")
  (desktop-restore-eager 8))
#+END_SRC

Workspaces within Emacs.

#+BEGIN_QUOTE
=eyebrowse= is a global minor mode for Emacs that allows you to manage your
window configurations in a simple manner, just like tiling window managers like
i3wm with their workspaces do. It displays their current state in the modeline
by default. The behaviour is modeled after
[[http://ranger.nongnu.org/][ranger]], a file manager written in Python.

[[https://github.com/wasamasa/eyebrowse][Vasilij Schneidermann]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :hook
  (after-init . eyebrowse-mode)
  :custom
  (eyebrowse-mode-line-left-delimiter "")
  (eyebrowse-mode-line-right-delimiter "")
  (eyebrowse-new-workspace t))
#+END_SRC

Window management.

- *TODO*: Shackle Magit.

#+BEGIN_QUOTE
=shackle= gives you the means to put an end to popped up buffers not behaving they
way you'd like them to. By setting up simple rules you can for instance make
Emacs always select help buffers for you or make everything reuse your currently
selected window.

[[https://github.com/wasamasa/shackle][Vasilij Schneidermann]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package shackle
  :hook
  (after-init . shackle-mode)
  :custom
  (shackle-rules '((help-mode :inhibit-window-quit t :same t)
                   (helpful-mode :inhibit-window-quit t :same t)))
  (shackle-select-reused-windows t))
#+END_SRC

Bind commands to move around windows.

#+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind
  (("C-M-k". windmove-up)
   ("C-M-l". windmove-right)
   ("C-M-j". windmove-down)
   ("C-M-h". windmove-left)))
#+END_SRC

Allow undo's and redo's with window configurations.

#+BEGIN_QUOTE
Winner mode is a global minor mode that records the changes in the window
configuration (i.e. how the frames are partitioned into windows) so that the
changes can be "undone" using the command =winner-undo=.  By default this one is
bound to the key sequence ctrl-c left.  If you change your mind (while undoing),
you can press ctrl-c right (calling =winner-redo=).

[[https://github.com/emacs-mirror/emacs/blob/master/lisp/winner.el][Ivar Rummelhoff]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure nil
  :hook (after-init . winner-mode))
#+END_SRC

** Comments

#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind
  ("<M-return>" . comment-indent-new-line)
  :custom
  (comment-auto-fill-only-comments t)
  (comment-multi-line t))
#+END_SRC

** Customization Menus

This merely changes face attributes. It also /Zenburn/ customization buffers a
little more.

#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :ensure nil
  :custom (custom-unlispify-tag-names nil))
#+END_SRC

** Daemon

Emacs can be run as a daemon onto which Emacs clients can latch on. This allows
for much shorter starting times when you already got Emacs running ie. when you
want to edit a single file for a quick edit.

#+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :hook (after-init . server-start))
#+END_SRC

** Dictionary

Define words using Wordnik.

#+BEGIN_SRC emacs-lisp
(use-package define-word)
#+END_SRC

Translage using Google.

#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC

** Diff

Ediff is a visual interface to Unix =diff=.

#+BEGIN_SRC emacs-lisp
(use-package ediff-wind
  :ensure nil
  :custom
  (ediff-split-window-function #'split-window-horizontally)
  (ediff-window-setup-function #'ediff-setup-windows-plain))
#+END_SRC

** Dired

Configure Dired buffers. Amongst many other things, Emacs is also a file
explorer.

#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :preface
  (defun me/dired-directories-first ()
    "Sort dired listings with directories first before adding marks."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))
  :hook
  (dired-mode . dired-hide-details-mode)
  :custom
  (dired-auto-revert-buffer t)
  (dired-dwim-target t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-alh")
  (dired-ls-F-marks-symlinks nil)
  (dired-recursive-copies 'always)
  :config
  (advice-add 'dired-readin :after #'me/dired-directories-first))
#+END_SRC

** Evil

#+BEGIN_QUOTE
Evil is an extensible vi layer for
[[http://www.gnu.org/software/emacs/][Emacs]]. It emulates the main features of
[[http://www.vim.org/][Vim]], and provides facilities for writing custom
extensions. Also see our page on [[http://emacswiki.org/emacs/Evil][EmacsWiki]].

https://github.com/emacs-evil/evil
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package evil
  :hook
  (after-init . evil-mode)
  (with-editor-mode . evil-insert-state)
  :preface
  (defun me/evil-indent (original &rest arguments)
    "Like `evil-indent' but save excursion."
    (save-excursion
      (apply original arguments)))
  :bind
  (:map evil-inner-text-objects-map
        ("g" . me/evil-whole-buffer)
   :map evil-outer-text-objects-map
        ("g" . me/evil-whole-buffer)
   :map evil-motion-state-map
        ([down] . ignore)
        ([left] . ignore)
        ([right] . ignore)
        ([up] . ignore)
        ("gs" . avy-goto-char-timer)
        ("gS" . avy-goto-char))
  :custom
  (evil-echo-state nil)
  (evil-emacs-state-cursor 'bar)
  (evil-want-C-u-scroll t)
  (evil-want-keybinding nil)
  :config
  (evil-define-text-object me/evil-whole-buffer (_ &optional _ _ type)
    "Text object to select the whole buffer."
    (evil-range (point-min) (point-max) type))
  (advice-add 'evil-indent :around #'me/evil-indent))
#+END_SRC

#+BEGIN_QUOTE
This is a collection of [[https://github.com/emacs-evil/evil][Evil]] bindings
for /the parts of Emacs/ that Evil does not cover properly by default, such as
=help-mode=, =M-x calendar=, Eshell and more.

https://github.com/emacs-evil/evil-collection
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :after evil
  :defer nil
  :config
  (evil-collection-init))
#+END_SRC

** Expand

HippieExpand manages expansions a la [[http://emmet.io/][Emmet]]. So I've
gathered all features that look anywhere close to this behavior for it to handle
under the same bind, that is =<C-return>=. Basically it's an expand DWIM.

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :bind
  (:map emmet-mode-keymap
        ("<C-return>" . nil)
        ("C-M-<left>" . nil)
        ("C-M-<right>" . nil)
        ("C-c w" . nil))
  :hook
  (css-mode html-mode rjsx-mode)
  :custom
  (emmet-insert-flash-time .1)
  (emmet-move-cursor-between-quote t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :ensure nil
  :preface
  (defun me/emmet-hippie-try-expand (args)
    "Try `emmet-expand-line' if `emmet-mode' is active. Else, does nothing."
    (interactive "P")
    (when emmet-mode (emmet-expand-line args)))
  :bind
  ("<C-return>" . hippie-expand)
  :custom
  (hippie-expand-try-functions-list '(yas-hippie-try-expand me/emmet-hippie-try-expand))
  (hippie-expand-verbose nil))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :bind
  (:map yas-minor-mode-map
        ("TAB" . nil)
        ([tab] . nil))
  :hook
  ((emacs-lisp-mode . yas-minor-mode)
   (html-mode . yas-minor-mode)
   (js-mode . yas-minor-mode)
   (org-mode . yas-minor-mode)
   (python-mode . yas-minor-mode))
  :custom
  (yas-snippet-dirs `(,(expand-file-name "snippets/" user-emacs-directory)))
  (yas-verbosity 2)
  :config
  (yas-reload-all))
#+END_SRC

** Help

#+BEGIN_SRC emacs-lisp
(use-package help-mode
  :ensure nil
  :bind
  (:map help-mode-map
        ("<" . help-go-back)
        (">" . help-go-forward)))
#+END_SRC

Provide better detailed help buffers.

#+BEGIN_SRC emacs-lisp
(use-package helpful)
#+END_SRC

** Ivy

#+BEGIN_QUOTE
Ivy is a generic completion mechanism for Emacs. While it operates similarly to
other completion schemes such as =icomplete-mode=, Ivy aims to be more
efficient, smaller, simpler, and smoother to use yet highly customizable.

[[https://github.com/abo-abo/swiper#ivy][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :hook
  (after-init . ivy-mode)
  :bind
  (:map ivy-minibuffer-map
        ("<C-return>" . ivy-call)
        ("C-<down>" . ivy-next-line-and-call)
        ("C-<up>" . ivy-previous-line-and-call))
  :custom
  (ivy-count-format "")
  (ivy-fixed-height-minibuffer t)
  (ivy-height 16)
  (ivy-initial-inputs-alist nil)
  (ivy-more-chars-alist '((t . 1)))
  (ivy-on-del-error-function 'ignore)
  (ivy-virtual-abbreviate 'full)
  :config
  (setf (alist-get 't ivy-format-functions-alist) #'ivy-format-function-line))
#+END_SRC

Augment Ivy's interface with details for candidates.

#+BEGIN_SRC emacs-lisp
(use-package ivy-rich
  :after ivy
  :defer nil
  :preface
  (defun me/ivy-rich-describe-variable-value (candidate)
    "Return the value of the variable in a `counsel-describe-variable' session."
    (let* ((symbol (intern candidate))
           (value (and (boundp symbol) (symbol-value symbol)))
           (print-level 3))
      (replace-regexp-in-string
       "[\n\t\^[\^M\^@\^G]" " "
       (cond ((booleanp value)
              (propertize (format "%s" value) 'face (if (null value) 'shadow 'success)))
             ((keymapp value)
              (propertize "<keymap>" 'face 'font-lock-type-face))
             ((listp value)
              (prin1-to-string value))
             ((stringp value)
              (propertize (format "%S" value) 'face 'font-lock-string-face))
             ((symbolp value)
              (propertize (format "'%s" value) 'face 'font-lock-function-name-face))
             ((format "%s" value)))
       t)))
  (defun me/ivy-rich-switch-buffer-size (candidate)
    "Return the buffer size in a `ivy-switch-buffer' session."
    (with-current-buffer
        (get-buffer candidate)
      (let ((size (buffer-size)))
        (cond
         ((> size 1000000) (format "%.1fM" (/ size 1000000.0)))
         ((> size 1000) (format "%.1fk" (/ size 1000.0)))
         (t (format "%d" size))))))
  :config
  (ivy-rich-mode 1)
  (setq-default
   ivy-rich-display-transformers-list
   (plist-put ivy-rich-display-transformers-list
              'counsel-M-x
              '(:columns
                ((counsel-M-x-transformer (:width .2))
                 (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
                :delimiter "  "))
   ivy-rich-display-transformers-list
   (plist-put ivy-rich-display-transformers-list
              'counsel-describe-function
              '(:columns
                ((counsel-describe-function-transformer (:width .2))
                 (ivy-rich-counsel-function-docstring (:face font-lock-doc-face)))
                :delimiter "  "))
   ivy-rich-display-transformers-list
   (plist-put ivy-rich-display-transformers-list
              'counsel-describe-variable
              '(:columns
                ((counsel-describe-variable-transformer (:width .2))
                 (me/ivy-rich-describe-variable-value (:width .2))
                 (ivy-rich-counsel-variable-docstring (:face font-lock-doc-face)))
                :delimiter "  "))
   ivy-rich-display-transformers-list
   (plist-put ivy-rich-display-transformers-list
              'ivy-switch-buffer
              '(:columns
                ((ivy-switch-buffer-transformer (:width .2))
                 (me/ivy-rich-switch-buffer-size (:align left :face shadow :width 8))
                 (ivy-rich-switch-buffer-major-mode (:face warning :width 22))
                 (ivy-rich-switch-buffer-project (:face success :width 34))
                 (ivy-rich-switch-buffer-path))
                :delimiter "  "
                :predicate (lambda (cand) (get-buffer cand))))
   ivy-rich-display-transformers-list
   (plist-put ivy-rich-display-transformers-list
              'package-install
              '(:columns
                ((ivy-rich-candidate (:width .2))
                 (ivy-rich-package-version (:face shadow :width 13))
                 (ivy-rich-package-archive-summary (:face font-lock-builtin-face :width 5))
                 (ivy-rich-package-install-summary (:face font-lock-doc-face)))
                :delimiter "  ")))
  (ivy-rich-set-display-transformer)
  :custom
  (ivy-rich-parse-remote-buffer nil))
#+END_SRC

*** Ivy / Counsel

#+BEGIN_SRC emacs-lisp
(use-package counsel
  :after ivy
  :defer nil
  :custom
  (ivy-initial-inputs-alist nil)
  (counsel-describe-function-function #'helpful-function)
  (counsel-describe-symbol-function #'helpful-symbol)
  (counsel-describe-variable-function #'helpful-variable)
  (counsel-outline-face-style 'org)
  (counsel-outline-path-separator " / ")
  :config
  (counsel-mode 1))

(use-package counsel-projectile
  :after counsel
  :defer nil
  :config
  (counsel-projectile-mode 1))
#+END_SRC

*** Ivy / Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :after ivy
  :defer nil
  :bind
  ("C-s" . swiper)
  :custom
  (swiper-goto-start-of-match t))
#+END_SRC

** Hydra

Hydra allows me to group binds together. It also shows a list of all implemented
commands in the echo area.

#+BEGIN_QUOTE
Once you summon the Hydra through the prefixed binding (the body + any one
head), all heads can be called in succession with only a short extension.

The Hydra is vanquished once Hercules, any binding that isn't the Hydra's head,
arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his
original purpose, calling his proper command. This makes the Hydra very
seamless, it's like a minor mode that disables itself auto-magically.

[[https://github.com/abo-abo/hydra][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package hydra
  :preface
  (defvar-local me/ongoing-hydra-body nil)
  (defun me/make-hydra-heading (&rest headings)
    "Format HEADINGS to look pretty in a hydra docstring."
    (mapconcat (lambda (it)
                 (propertize (format "%-20s" it) 'face 'shadow))
               headings
               nil))
  (defun me/ongoing-hydra ()
    (interactive)
    (if me/ongoing-hydra-body
        (funcall me/ongoing-hydra-body)
      (user-error "me/ongoing-hydra: me/ongoing-hydra-body is not set")))
  :bind
  ("C-c d" . hydra-dates/body)
  ("C-c e" . hydra-eyebrowse/body)
  ("C-c f" . hydra-flycheck/body)
  ("C-c g" . hydra-magit/body)
  ("C-c i" . hydra-ivy/body)
  ("C-c o" . me/ongoing-hydra)
  ("C-c p" . hydra-projectile/body)
  ("C-c s" . hydra-system/body)
  ("C-c w" . hydra-windows/body)
  :custom
  (hydra-default-hint nil))
#+END_SRC

*** Hydra / Dates

Group date-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-dates (:color blue)
  (concat "\n " (me/make-hydra-heading "Dates" "Insert" "Insert with Time")
          "
 _q_ quit              _d_ short             _D_ short
 ^^                    _i_ iso               _I_ iso
 ^^                    _l_ long              _L_ long
")
  ("q" nil)
  ("d" me/date-short)
  ("D" me/date-short-with-time)
  ("i" me/date-iso)
  ("I" me/date-iso-with-time)
  ("l" me/date-long)
  ("L" me/date-long-with-time))
#+END_SRC

[[./screenshots/hydra.dates.jpg]]

*** Hydra / Eyebrowse

Group Eyebrowse commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-eyebrowse (:color blue)
  (concat "\n " (me/make-hydra-heading "Eyebrowse" "Do" "Switch")
          "
 _q_ quit              _c_ create            _0_-_9_ %s(eyebrowse-mode-line-indicator)
 ^^                    _k_ kill              _<_ previous
 ^^                    _r_ rename            _>_ next
 ^^                    ^^                    _e_ last
 ^^                    ^^                    _s_ switch
")
  ("q" nil)
  ("0" eyebrowse-switch-to-window-config-0)
  ("1" eyebrowse-switch-to-window-config-1)
  ("2" eyebrowse-switch-to-window-config-2)
  ("3" eyebrowse-switch-to-window-config-3)
  ("4" eyebrowse-switch-to-window-config-4)
  ("5" eyebrowse-switch-to-window-config-5)
  ("6" eyebrowse-switch-to-window-config-6)
  ("7" eyebrowse-switch-to-window-config-7)
  ("8" eyebrowse-switch-to-window-config-8)
  ("9" eyebrowse-switch-to-window-config-9)
  ("<" eyebrowse-prev-window-config :color red)
  (">" eyebrowse-next-window-config :color red)
  ("c" eyebrowse-create-window-config)
  ("e" eyebrowse-last-window-config)
  ("k" eyebrowse-close-window-config :color red)
  ("r" eyebrowse-rename-window-config)
  ("s" eyebrowse-switch-to-window-config))
#+END_SRC

[[./screenshots/hydra.eyebrowse.jpg]]

*** Hydra / Flycheck

Group Flycheck commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-flycheck (:color blue)
  (concat "\n " (me/make-hydra-heading "Flycheck" "Errors" "Checker")
          "
 _q_ quit              _<_ previous          _?_ describe
 _m_ manual            _>_ next              _d_ disable
 _v_ verify setup      _f_ goto              _s_ select
 ^^                    _F_ check             ^^
 ^^                    _l_ list              ^^
")
  ("q" nil)
  ("<" flycheck-previous-error :color red)
  (">" flycheck-next-error :color red)
  ("?" flycheck-describe-checker)
  ("d" flycheck-disable-checker)
  ("f" (flycheck-next-error 1 t))
  ("F" flycheck-buffer)
  ("l" flycheck-list-errors)
  ("m" flycheck-manual)
  ("s" flycheck-select-checker)
  ("v" flycheck-verify-setup))
#+END_SRC

[[./screenshots/hydra.flycheck.jpg]]

*** Hydra / Ivy

Group Ivy commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-ivy (:color blue)
  (concat "\n " (me/make-hydra-heading "Ivy" "Do" "Browse")
          "
 _q_ quit              _m_ mark              _f_ faces
 _r_ resume            _M_ unmark            _i_ imenu
 ^^                    ^^                    _l_ libraries
 ^^                    ^^                    _s_ symbols
 ^^                    ^^                    _u_ unicode
")
  ("q" nil)
  ("f" counsel-faces)
  ("i" counsel-imenu)
  ("l" counsel-find-library)
  ("m" ivy-mark :color red)
  ("M" ivy-unmark :color red)
  ("r" ivy-resume)
  ("s" counsel-info-lookup-symbol)
  ("u" counsel-unicode-char))
#+END_SRC

[[./screenshots/hydra.ivy.jpg]]

*** Hydra / Magit

Group Magit commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-magit (:color blue)
  (concat "\n " (me/make-hydra-heading "Magit" "Do" "More")
          "
 _q_ quit              _b_ blame             _m_ smerge...
 ^^                    _c_ clone             ^^
 ^^                    _i_ init              ^^
 ^^                    _s_ status            ^^
")
  ("q" nil)
  ("b" magit-blame)
  ("c" magit-clone)
  ("i" magit-init)
  ("m" hydra-smerge/body)
  ("s" magit-status))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra hydra-smerge
  (:color pink :pre (if (not smerge-mode) (smerge-mode 1)) :post (smerge-auto-leave))
  (concat "\n " (me/make-hydra-heading "SMerge" "Move" "Keep" "Diff")
          "
 _q_ quit              _g_ first             _RET_ current         _=_ upper / lower
 ^^                    _G_ last              _a_ all               _<_ upper / base
 ^^                    _C-j_ next            _b_ base              _>_ base / lower
 ^^                    _C-k_ previous        _l_ lower             _E_ ediff
 ^^                    ^^                    _u_ upper             _H_ highlight
")
  ("q" nil :color blue)
  ("C-j" smerge-next)
  ("C-k" smerge-prev)
  ("<" smerge-diff-base-upper)
  (">" smerge-diff-base-lower)
  ("=" smerge-diff-upper-lower)
  ("RET" smerge-keep-current)
  ("a" smerge-keep-all)
  ("b" smerge-keep-base)
  ("E" smerge-ediff)
  ("g" (progn (goto-char (point-min)) (smerge-next)))
  ("G" (progn (goto-char (point-max)) (smerge-prev)))
  ("H" smerge-refine)
  ("l" smerge-keep-lower)
  ("u" smerge-keep-upper))
#+END_SRC

[[./screenshots/hydra.magit.jpg]]

*** Hydra / Markdown

Group Markdown commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-markdown (:color pink)
  (concat "\n " (me/make-hydra-heading "Markdown" "Table Columns" "Table Rows")
          "
 _q_ quit              _c_ insert            _r_ insert
 ^^                    _C_ delete            _R_ delete
 ^^                    _M-<left>_ left       _M-<down>_ down
 ^^                    _M-<right>_ right     _M-<up>_ up
")
  ("q" nil)
  ("c" markdown-table-insert-column)
  ("C" markdown-table-delete-column)
  ("r" markdown-table-insert-row)
  ("R" markdown-table-delete-row)
  ("M-<left>" markdown-table-move-column-left)
  ("M-<right>" markdown-table-move-column-right)
  ("M-<down>" markdown-table-move-row-down)
  ("M-<up>" markdown-table-move-row-up))
#+END_SRC

[[./screenshots/hydra.markdown.jpg]]

*** Hydra / Org

Group Org commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-org (:color pink)
  (concat "\n " (me/make-hydra-heading "Org" "Links" "Outline")
          "
 _q_ quit              _i_ insert            _<_ previous
 ^^                    _n_ next              _>_ next
 ^^                    _p_ previous          _a_ all
 ^^                    _s_ store             _g_ go
 ^^                    ^^                    _v_ overview
")
  ("q" nil)
  ("<" org-backward-element)
  (">" org-forward-element)
  ("a" outline-show-all)
  ("g" counsel-org-goto :color blue)
  ("i" org-insert-link :color blue)
  ("n" org-next-link)
  ("p" org-previous-link)
  ("s" org-store-link)
  ("v" org-overview))
#+END_SRC

[[./screenshots/hydra.org.jpg]]

*** Hydra / Projectile

Group Projectile commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-projectile (:color blue)
  (concat "\n " (me/make-hydra-heading "Projectile" "Buffers" "Find" "Search")
          "
 _q_ quit              _b_ list              _d_ directory         _r_ replace
 _i_ reset cache       _K_ kill all          _D_ root              _R_ regexp replace
 _n_ new               _S_ save all          _f_ file              _s_ rg
 ^^                    ^^                    _p_ project           ^^
")
  ("q" nil)
  ("b" counsel-projectile-switch-to-buffer)
  ("d" counsel-projectile-find-dir)
  ("D" projectile-dired)
  ("f" counsel-projectile-find-file)
  ("i" projectile-invalidate-cache :color red)
  ("K" projectile-kill-buffers)
  ("n" projectile-add-known-project)
  ("p" counsel-projectile-switch-project)
  ("r" projectile-replace)
  ("R" projectile-replace-regexp)
  ("s" counsel-projectile-rg)
  ("S" projectile-save-project-buffers))
#+END_SRC

[[./screenshots/hydra.projectile.jpg]]

*** Hydra / RJSX

Group React JavaScript commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-rjsx (:color blue)
  (concat "\n " (me/make-hydra-heading "RJSX" "JSDoc")
          "
 _q_ quit              _f_ function
 ^^                    _F_ file
")
  ("q" nil)
  ("f" js-doc-insert-function-doc-snippet)
  ("F" js-doc-insert-file-doc))
#+END_SRC

[[./screenshots/hydra.rjsx.jpg]]

*** Hydra / System

Group system-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-system (:color blue)
  (concat "\n " (me/make-hydra-heading "System" "Packages" "Processes" "Shell")
          "
 _q_ quit              _i_ install           _s_ list              _e_ eshell
 ^^                    _p_ list              ^^                    _t_ term
 ^^                    _P_ upgrade           ^^                    _T_ ansi-term
")
  ("q" nil)
  ("e" (eshell t))
  ("i" package-install)
  ("p" paradox-list-packages)
  ("P" paradox-upgrade-packages)
  ("s" list-processes)
  ("t" term)
  ("T" ansi-term))
#+END_SRC

[[./screenshots/hydra.system.jpg]]

*** Hydra / Tide

Group TypeScript commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-tide (:color blue)
  (concat "\n " (me/make-hydra-heading "Tide" "Server" "Code")
          "
 _q_ quit              _l_ list              _d_ documentation
 ^^                    _r_ restart           ^^
 ^^                    _v_ verify setup      ^^
")
  ("q" nil)
  ("d" tide-documentation-at-point)
  ("l" tide-list-servers)
  ("r" tide-restart-server)
  ("v" tide-verify-setup))
#+END_SRC

[[./screenshots/hydra.tide.jpg]]

*** Hydra / Windows

Group window-related commands.

#+BEGIN_SRC emacs-lisp
(defhydra hydra-windows (:color pink)
  (concat "\n " (me/make-hydra-heading "Windows" "Size" "Zoom" "Buffer")
          "
 _q_ quit              _b_ balance           _-_ out               _w_ revert
 ^^                    _i_ heighten          _+_ in
 ^^                    _j_ narrow            _0_ reset
 ^^                    _k_ lower             ^^
 ^^                    _l_ widen             ^^
")
  ("q" nil)
  ("b" balance-windows :color blue)
  ("i" enlarge-window)
  ("j" shrink-window-horizontally)
  ("k" shrink-window)
  ("l" enlarge-window-horizontally)
  ("w" (revert-buffer nil t) :color blue)
  ("-" default-text-scale-decrease)
  ("+" default-text-scale-increase)
  ("0" default-text-scale-reset :color blue))
#+END_SRC

[[./screenshots/hydra.windows.jpg]]

** IRC

- *TODO*: Display the current count of users. =(hash-table-count erc-channel-users)=

#+BEGIN_SRC emacs-lisp
(use-package erc
  :ensure nil
  :preface
  (defun me/erc ()
    "Connect to `me/erc-server' on `me/erc-port' as `me/erc-nick' with
    `me/erc-password'."
    (interactive)
    (erc :server me/erc-server
         :port me/erc-port
         :nick me/erc-nick
         :password me/erc-password))
  (defun me/erc-bol-shifted ()
    "See `erc-bol'. Support shift."
    (interactive "^")
    (erc-bol))
  :bind
  (:map erc-mode-map
        ([remap erc-bol] . me/erc-bol-shifted)
        ("M-<down>" . erc-next-command)
        ("M-<up>" . erc-previous-command))
  :hook
  (erc-mode . (lambda () (setq-local scroll-margin 0)))
  :custom
  (erc-autojoin-channels-alist '(("freenode.net" "#emacs")))
  (erc-fill-function 'erc-fill-static)
  (erc-fill-static-center 20)
  (erc-header-line-format nil)
  (erc-insert-timestamp-function 'erc-insert-timestamp-left)
  (erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
  (erc-prompt (format "%19s" ">"))
  (erc-timestamp-format nil)
  :config
  (erc-scrolltobottom-enable))
#+END_SRC

Highlight ERC nicks with unique colors.

#+BEGIN_SRC emacs-lisp
(use-package erc-hl-nicks)
#+END_SRC

** Linters

Flycheck lints warnings and errors directly within buffers. It can check a lot
of different syntaxes, as long as you make sure that Emacs has access to the
binaries (see [[./README.org][README.org]]).

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :hook
  ((css-mode . flycheck-mode)
   (emacs-lisp-mode . flycheck-mode)
   (js-mode . flycheck-mode)
   (web-mode . flycheck-mode)
   (python-mode . flycheck-mode))
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled))
  (flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  (flycheck-display-errors-delay .3)
  :config
  (flycheck-add-mode 'javascript-eslint 'web-mode))
#+END_SRC

#+BEGIN_QUOTE
The =prettier= Emacs package reformats your code by running
[[https://github.com/prettier/prettier][Prettier]] with minimal overhead, by
request or transparently on file save.

[[https://github.com/jscheid/prettier.el][Julian Scheid]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package prettier)
#+END_SRC

** Mode-Line

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :demand t
  :custom
  (doom-modeline-bar-width 1)
  (doom-modeline-buffer-file-name-style 'relative-to-project)
  (doom-modeline-enable-word-count t)
  (doom-modeline-icon (display-graphic-p))
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-percent-position nil)
  (doom-modeline-vcs-max-length 28)
  :config

  (cl-defmacro me/doom-modeline-segment (name &key faces text (when t))
    (message "-------------------- %s" name)
    `(doom-modeline-def-segment ,name
       (let ((active (doom-modeline--active))
             (result (if (listp ,text)
                         (concat ,text)
                       ,text))
             (space (doom-modeline-spc)))
         (when (and ,when result)
           (concat "[" space result space "]")))))

  ;; (me/doom-modeline-segment me/modals2
  ;;   :when active
  ;;   :text (doom-modeline--evil))
  ;; (me/doom-modeline-segment me/buffer2
  ;;   :text (doom-modeline--buffer-name))
  ;; (me/doom-modeline-segment me/buffer-position2
  ;;   :text ("asdf" (format-mode-line "%l:%c") "asdf"))
  ;; (me/doom-modeline-segment me/flycheck2
  ;;   :when (bound-and-true-p flycheck-mode)
  ;;   :faces ((active . nil))
  ;;   :text doom-modeline--flycheck-icon doom-modeline--flycheck-text)

  ;; (doom-modeline-def-modeline 'org-src
  ;;   '(bar me/modals2 me/buffer2 me/buffer-position2 me/flycheck2 selection-info)
  ;;   '(irc-buffers matches me/process debug me/major-mode workspace-name))

  ;; (me/doom-modeline-segment me/buffer-simple2
  ;;   :faces ((modified . doom-modeline-buffer-modified)
  ;;           (active . doom-modeline-buffer-file))
  ;;   :text (format-mode-line "%b"))
  ;; (me/doom-modeline-segment me/default-directory2
  ;;   :faces ((active . doom-modeline-buffer-path))
  ;;   :text (abbreviate-file-name default-directory))
  ;; (me/doom-modeline-segment me/major-mode2
  ;;   :faces ((active . mode-line-buffer-major-mode))
  ;;   :text mode-name?)
  ;; (me/doom-modeline-segment me/process2
  ;;   :faces ((active . nil))
  ;;   :text (format-mode-line mode-line-process))
  ;; (me/doom-modeline-segment me/vcs2
  ;;   :when doom-modeline--vcs-text
  ;;   :faces ((active . nil))
  ;;   :text (concat ":" doom-modeline--vcs-text))

  (doom-modeline-def-segment me/buffer
    "The buffer description and major mode icon."
    (concat (doom-modeline-spc)
            (doom-modeline--buffer-name)
            (doom-modeline-spc)))
  (doom-modeline-def-segment me/buffer-position
    "The buffer position."
    (let* ((active (doom-modeline--active))
           (face (if active 'mode-line 'mode-line-inactive)))
      (propertize (concat (doom-modeline-spc)
                          (format-mode-line "%l:%c")
                          (doom-modeline-spc))
                  'face face)))
  (doom-modeline-def-segment me/buffer-simple
    "The buffer name but simpler."
    (let* ((active (doom-modeline--active))
           (face (cond ((and buffer-file-name (buffer-modified-p)) 'doom-modeline-buffer-modified)
                       (active 'doom-modeline-buffer-file)
                       (t 'mode-line-inactive))))
      (concat (doom-modeline-spc)
              (propertize "%b" 'face face)
              (doom-modeline-spc))))
  (doom-modeline-def-segment me/default-directory
    "The buffer directory."
    (let* ((active (doom-modeline--active))
           (face (if active 'doom-modeline-buffer-path 'mode-line-inactive)))
      (concat (doom-modeline-spc)
              (propertize (abbreviate-file-name default-directory) 'face face)
              (doom-modeline-spc))))
  (doom-modeline-def-segment me/flycheck
    "The error status with color codes and icons."
    (when (bound-and-true-p flycheck-mode)
      (let ((active (doom-modeline--active))
            (icon doom-modeline--flycheck-icon)
            (text doom-modeline--flycheck-text))
        (concat
         (when icon
           (concat (doom-modeline-spc)
                   (if active icon (doom-modeline-propertize-icon icon 'mode-line-inactive))))
         (when text
           (concat (if icon (doom-modeline-vspc) (doom-modeline-spc))
                   (if active text (propertize text 'face 'mode-line-inactive))))
         (when (or icon text)
           (doom-modeline-spc))))))
  (doom-modeline-def-segment me/info
    "The topic and nodes in Info buffers."
    (let ((active (doom-modeline--active)))
      (concat
       (propertize " (" 'face (if active 'mode-line 'mode-line-inactive))
       (propertize (if (stringp Info-current-file)
                       (replace-regexp-in-string
                        "%" "%%"
                        (file-name-sans-extension (file-name-nondirectory Info-current-file)))
                     (format "*%S*" Info-current-file))
                   'face (if active 'doom-modeline-info 'mode-line-inactive))
       (propertize ") " 'face (if active 'mode-line 'mode-line-inactive))
       (when Info-current-node
         (propertize (concat (replace-regexp-in-string "%" "%%" Info-current-node)
                             (doom-modeline-spc))
                     'face (if active 'doom-modeline-buffer-path 'mode-line-inactive))))))
  (doom-modeline-def-segment me/major-mode
    "The current major mode, including environment information."
    (let* ((active (doom-modeline--active))
           (face (if active 'doom-modeline-buffer-major-mode 'mode-line-inactive)))
      (propertize (concat (doom-modeline-spc)
                          mode-name
                          (when doom-modeline-env--version (format " %s" doom-modeline-env--version))
                          (doom-modeline-spc))
                  'face face)))
  (doom-modeline-def-segment me/process
    "The ongoing process details."
    (concat (if (doom-modeline--active)
                mode-line-process
              (propertize (format-mode-line mode-line-process)
                          'face 'mode-line-inactive))
            (doom-modeline-spc)))
  (doom-modeline-def-segment me/modals
    "Display modal editing states."
    (when (doom-modeline--active)
      (doom-modeline-segment--modals)))
  (doom-modeline-def-segment me/space
    "A simple space."
    (doom-modeline-spc))
  (doom-modeline-def-segment me/vcs
    "The version control system information."
    (when-let ((branch doom-modeline--vcs-text))
      (let ((active (doom-modeline--active))
            (text (concat ":" branch)))
        (concat (doom-modeline-spc)
                (if active text (propertize text 'face 'mode-line-inactive))
                (doom-modeline-spc)))))
  (doom-modeline-mode 1)
  (doom-modeline-def-modeline 'info
    '(bar me/modals me/buffer me/info me/buffer-position selection-info)
    '(irc-buffers matches me/process debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'main
    '(bar me/modals me/buffer remote-host me/buffer-position me/flycheck selection-info)
    '(irc-buffers matches me/process me/vcs debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'message
    '(bar me/modals me/buffer-simple me/buffer-position selection-info)
    '(irc-buffers matches me/process me/major-mode workspace-name))
  (doom-modeline-def-modeline 'org-src
    '(bar me/modals me/buffer-simple me/buffer-position me/flycheck selection-info)
    '(irc-buffers matches me/process debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'package
    '(bar me/modals me/space package)
    '(irc-buffers matches me/process debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'project
    '(bar me/modals me/default-directory)
    '(irc-buffers matches me/process debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'special
    '(bar me/modals me/buffer me/buffer-position selection-info)
    '(irc-buffers matches me/process debug me/major-mode workspace-name))
  (doom-modeline-def-modeline 'vcs
    '(bar me/modals me/buffer remote-host me/buffer-position selection-info)
    '(irc-buffers matches me/process debug me/major-mode workspace-name)))
#+END_SRC

** Navigation

*** Navigation / Avy

#+BEGIN_QUOTE
=avy= is a GNU Emacs package for jumping to visible text using a char-based
decision tree. See also
[[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] and
[[https://github.com/Lokaltog/vim-easymotion][vim-easymotion]] - =avy= uses the
same idea.

[[https://github.com/abo-abo/avy][Oleh Krehel]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package avy
  :custom
  (avy-background t)
  (avy-style 'at-full)
  (avy-timeout-seconds .3)
  :config
  (set-face-italic 'avy-goto-char-timer-face nil)
  (set-face-italic 'avy-lead-face nil))
#+END_SRC

*** Navigation / Inline

Smarter =C-a=.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap move-beginning-of-line] #'me/beginning-of-line-dwim)

(defun me/beginning-of-line-dwim ()
  "Move point to first non-whitespace character, or beginning of line."
  (interactive "^")
  (let ((origin (point)))
    (beginning-of-line)
    (and (= origin (point))
         (back-to-indentation))))
#+END_SRC

#+BEGIN_QUOTE
Evil-snipe emulates [[https://github.com/goldfeld/vim-seek][vim-seek]] and/or
[[https://github.com/justinmk/vim-sneak][vim-sneak]] in
[[https://gitorious.org/evil/pages/Home][evil-mode]].

[[https://github.com/hlissner/evil-snipe][Henrik Lissner]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package evil-snipe
  :after evil
  :defer nil
  :config
  (evil-snipe-mode)
  (evil-snipe-override-mode)
  :custom
  (evil-snipe-char-fold t)
  (evil-snipe-repeat-scope 'visible)
  (evil-snipe-smart-case t))
#+END_SRC

*** Navigation / Paragraphs

I disagree with Emacs' definition of paragraphs so I redefined the way it should
jump from one paragraph to another.

- *TOFIX*: Ignore invisible text.

#+BEGIN_SRC emacs-lisp
(global-set-key [remap backward-paragraph] #'me/backward-paragraph-dwim)
(global-set-key [remap forward-paragraph] #'me/forward-paragraph-dwim)

(defun me/backward-paragraph-dwim ()
  "Move backward to start of paragraph."
  (interactive "^")
  (skip-chars-backward "\n")
  (unless (search-backward-regexp "\n[[:blank:]]*\n" nil t)
    (goto-char (point-min)))
  (skip-chars-forward "\n"))

(defun me/forward-paragraph-dwim ()
  "Move forward to start of next paragraph."
  (interactive "^")
  (skip-chars-forward "\n")
  (unless (search-forward-regexp "\n[[:blank:]]*\n" nil t)
    (goto-char (point-max)))
  (skip-chars-forward "\n"))
#+END_SRC

*** Navigation / Pulse

Pulse temporarily highlights the background color of a line or region.

#+BEGIN_SRC emacs-lisp
(use-package pulse :ensure nil)
#+END_SRC

*** Navigation / Replace

Better search and replace features. Even though I prefer to use
=multiple-cursors= to replace text in different places at once, =anzu= has a
nice feedback on regexp matches.

#+BEGIN_QUOTE
=anzu.el= is an Emacs port of
[[https://github.com/osyo-manga/vim-anzu][anzu.vim]]. =anzu.el= provides a minor
mode which displays /current match/ and /total matches/ information in the
mode-line in various search modes.

[[https://github.com/syohex/emacs-anzu][Syohei Yoshida]]
#+END_QUOTE

/Regular replace/

[[./screencasts/emacs.anzu-replace.gif]]

/Regexp replace/

[[./screencasts/emacs.anzu-replace-regexp.gif]]

#+BEGIN_SRC emacs-lisp
(use-package anzu
  :bind
  ([remap query-replace] . anzu-query-replace-regexp)
  :hook
  (after-init . global-anzu-mode)
  :custom
  (anzu-cons-mode-line-p nil))
#+END_SRC

*** Navigation / Scroll

Enable horizontal scroll.

- *TODO*: Scroll the window under cursor instead of where point is.

#+BEGIN_SRC emacs-lisp
(put 'scroll-left 'disabled nil)
(defun me/scroll-left ()
  (interactive)
  (when truncate-lines (scroll-left 2)))
(defun me/scroll-right ()
  (interactive)
  (when truncate-lines (scroll-right 2)))
(global-set-key (kbd "<wheel-left>") #'me/scroll-right)
(global-set-key (kbd "<wheel-right>") #'me/scroll-left)
(global-set-key (kbd "S-<wheel-down>") #'me/scroll-left)
(global-set-key (kbd "S-<wheel-up>") #'me/scroll-right)
#+END_SRC

Configure the mouse scroll.

#+BEGIN_SRC emacs-lisp
(use-package mwheel
  :ensure nil
  :custom
  (mouse-wheel-progressive-speed nil)
  (mouse-wheel-scroll-amount '(1 ((control) . 5))))
#+END_SRC

*** Navigation / Search

Isearch stands for /incremental search/. This means that search results are
highlighted while you are typing your query, incrementally. Since he who can do
more can do less, I've replaced default bindings with the regexp-equivalent
commands.

#+BEGIN_SRC emacs-lisp
(use-package isearch
  :ensure nil
  :bind
  (("C-S-r" . isearch-backward-regexp)
   ("C-S-s" . isearch-forward-regexp)
   :map isearch-mode-map
   ("<M-down>" . isearch-ring-advance)
   ("<M-up>" . isearch-ring-retreat)
   :map minibuffer-local-isearch-map
   ("<M-down>" . next-history-element)
   ("<M-up>" . previous-history-element))
  :init
  (setq-default
   isearch-allow-scroll t
   lazy-highlight-buffer t
   lazy-highlight-cleanup nil
   lazy-highlight-initial-delay 0))
#+END_SRC

** OS-Specific

Augment Emacs experience for MacOS users.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
  (setq-default
   dired-use-ls-dired nil                            ; MacOS's ls does not support --dired
   exec-path (append exec-path '("/usr/local/bin"))  ; Add Homebrew path
   ns-command-modifier 'meta                         ; Map Meta to the Cmd key
   ns-option-modifier 'super                         ; Map Super to the Alt key
   ns-right-option-modifier nil))                    ; Disable the right Alt key
#+END_SRC

Initialize environment variables.

#+BEGIN_QUOTE
Ever find that a command works in your shell, but not in Emacs?

This happens a lot on OS X, where an Emacs instance started from the GUI
inherits a default set of environment variables.

This library works solves this problem by copying important environment
variables from the user's shell: it works by asking your shell to print out the
variables of interest, then copying them into the Emacs environment.

[[https://github.com/purcell/exec-path-from-shell][Steve Purcell]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :if
  (memq window-system '(mac ns))
  :hook
  (after-init . exec-path-from-shell-initialize)
  :custom
  (exec-path-from-shell-check-startup-files nil))
#+END_SRC

** Parentheses

Highlight parenthese-like delimiters in a rainbow fashion. It ease the reading
when dealing with mismatched parentheses.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

I am still looking for the perfect parenthesis management setup as of
today... No package seem to please my person.

- *TODO*: Find a better parenthese management package.

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :bind
  (("M-<backspace>" . sp-unwrap-sexp)
   ("M-<left>" . sp-forward-barf-sexp)
   ("M-<right>" . sp-forward-slurp-sexp)
   ("M-S-<left>" . sp-backward-slurp-sexp)
   ("M-S-<right>" . sp-backward-barf-sexp))
  :hook
  (after-init . smartparens-global-mode)
  :custom
  (sp-highlight-pair-overlay nil)
  (sp-highlight-wrap-overlay nil)
  (sp-highlight-wrap-tag-overlay nil)
  :config
  (show-paren-mode 0)
  (require 'smartparens-config))
#+END_SRC

** Paste

#+BEGIN_QUOTE
This mode allows to paste whole buffers or parts of buffers to pastebin-like
services. It supports more than one service and will failover if one service
fails.

[[https://github.com/etu/webpaste.el][Elis Hirwing]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package webpaste)
#+END_SRC

** Point and Region

Increase region by semantic units. It tries to be smart about it and adapt to
the structure of the current major mode.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind
  ("C-=" . er/expand-region))
#+END_SRC

*** Point and Region / Lines

Work on lines.

- *TODO*: Handle regions.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<M-S-up>") 'me/duplicate-backward)
(global-set-key (kbd "<M-S-down>") 'me/duplicate-forward)
(global-set-key (kbd "<M-down>") 'me/swap-line-down)
(global-set-key (kbd "<M-up>") 'me/swap-line-up)

(defun me/duplicate-line (&optional stay)
  "Duplicate current line.
With optional argument STAY true, leave point where it was."
  (save-excursion
    (move-end-of-line nil)
    (save-excursion
      (insert (buffer-substring (point-at-bol) (point-at-eol))))
    (newline))
  (unless stay
    (let ((column (current-column)))
      (forward-line)
      (forward-char column))))

(defun me/duplicate-backward ()
  "Duplicate current line upward or region backward.
If region was active, keep it so that the command can be repeated."
  (interactive)
  (if (region-active-p)
      (let (deactivate-mark)
        (save-excursion
          (insert (buffer-substring (region-beginning) (region-end)))))
    (me/duplicate-line t)))

(defun me/duplicate-forward ()
  "Duplicate current line downward or region forward.
If region was active, keep it so that the command can be repeated."
  (interactive)
  (if (region-active-p)
      (let (deactivate-mark (point (point)))
        (insert (buffer-substring (region-beginning) (region-end)))
        (push-mark point))
    (me/duplicate-line)))

(defun me/swap-line-down ()
  "Move down the line under point."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))

(defun me/swap-line-up ()
  "Move up the line under point."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
#+END_SRC

*** Point and Region / Multiple Cursors

Enable multiple cursors at once. Some witchcraft at work here.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind*
  (("C-S-c C-S-a" . mc/vertical-align-with-space)
   ("C-S-c C-S-c" . mc/edit-lines)
   ("C-S-c C-S-n" . mc/insert-numbers)
   :map mc/keymap
   ("M-a" . mc/vertical-align-with-space)
   ("M-h" . mc-hide-unmatched-lines-mode)
   ("M-l" . mc/insert-letters)
   ("M-n" . mc/insert-numbers))
  :init
  (setq-default
   mc/list-file (expand-file-name ".multiple-cursors.el" user-emacs-directory))
  :custom
  (mc/edit-lines-empty-lines 'ignore)
  (mc/insert-numbers-default 1))
#+END_SRC

*** Point and Region / Selected

Enable new custom binds when region is active. I've also added a few helpers to
use with =selected=.

#+BEGIN_SRC emacs-lisp
(use-package selected
  :preface
  (defvar-local me/pretty-print-function nil)
  (defun me/pretty-print (beg end)
    (interactive "r")
    (if me/pretty-print-function
        (progn (funcall me/pretty-print-function beg end)
               (setq deactivate-mark t))
      (user-error "me/pretty-print: me/pretty-print-function is not set")))
  :bind
  (:map selected-keymap
        ("C-?"         . hydra-selected/body)
        ("<"           . mc/mark-previous-like-this)
        (">"           . mc/mark-next-like-this)
        ("C-<"         . mc/unmark-previous-like-this)
        ("C->"         . mc/unmark-next-like-this)
        ("C-M-<"       . mc/skip-to-previous-like-this)
        ("C-M->"       . mc/skip-to-next-like-this)
        ("C-<tab>"     . me/pretty-print)
        ("C-c C-c"     . me/eval-region-and-kill-mark)
        ("C-b"         . me/browse-url-and-kill-mark)
        ("C-c c"       . capitalize-region)
        ("C-c k"       . me/kebab-region)
        ("C-c l"       . downcase-region)
        ("C-c u"       . upcase-region)
        ("C-d"         . define-word-at-point)
        ("C-f"         . fill-region)
        ("C-g"         . selected-off)
        ("C-h h"       . hlt-highlight-region)
        ("C-h H"       . hlt-unhighlight-region)
        ("C-p"         . webpaste-paste-region)
        ("C-s r"       . reverse-region)
        ("C-s s"       . sort-lines)
        ("C-s w"       . me/sort-words)
        ("C-t"         . google-translate-at-point)
        ("<M-left>"    . me/indent-rigidly-left-and-keep-mark)
        ("<M-right>"   . me/indent-rigidly-right-and-keep-mark)
        ("<M-S-left>"  . me/indent-rigidly-left-tab-and-keep-mark)
        ("<M-S-right>" . me/indent-rigidly-right-tab-and-keep-mark))
  :hook (after-init . selected-global-mode)
  :config (require 'browse-url))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun me/eval-region-and-kill-mark (beg end)
  "Execute the region as Lisp code.
Call `eval-region' and kill mark. Move back to the beginning of the region."
  (interactive "r")
  (eval-region beg end)
  (setq deactivate-mark t)
  (goto-char beg))

(defun me/browse-url-and-kill-mark (url &rest args)
  "Ask a WWW browser to load URL.
Call `browse-url' and kill mark."
  (interactive (browse-url-interactive-arg "URL: "))
  (apply #'browse-url url args)
  (setq deactivate-mark t))

(defun me/indent-rigidly-left-and-keep-mark (beg end)
  "Indent all lines between BEG and END leftward by one space.
Call `indent-rigidly-left' and keep mark."
  (interactive "r")
  (indent-rigidly-left beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-left-tab-and-keep-mark (beg end)
  "Indent all lines between BEG and END leftward to a tab stop.
Call `indent-rigidly-left-to-tab-stop' and keep mark."
  (interactive "r")
  (indent-rigidly-left-to-tab-stop beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-right-and-keep-mark (beg end)
  "Indent all lines between BEG and END rightward by one space.
Call `indent-rigidly-right' and keep mark."
  (interactive "r")
  (indent-rigidly-right beg end)
  (setq deactivate-mark nil))

(defun me/indent-rigidly-right-tab-and-keep-mark (beg end)
  "Indent all lines between BEG and END rightward to a tab stop.
Call `indent-rigidly-right-to-tab-stop' and keep mark."
  (interactive "r")
  (indent-rigidly-right-to-tab-stop beg end)
  (setq deactivate-mark nil))

(defun me/kebab-region (begin end)
  "Convert region to kebab-case."
  (interactive "r")
  (downcase-region begin end)
  (save-excursion
    (perform-replace " +" "-" nil t nil nil nil begin end)))

(defun me/sort-words (reverse beg end)
  "Sort words in region alphabetically, in REVERSE if negative.
Prefixed with negative \\[universal-argument], sorts in reverse.

The variable `sort-fold-case' determines whether alphabetic case
affects the sort order.

See `sort-regexp-fields'."
  (interactive "*P\nr")
  (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+END_SRC

** Projectile

Projectile brings project-level facilities to Emacs such as grep, find and
replace.

#+BEGIN_QUOTE
Projectile is a project interaction library for Emacs. Its goal is to provide a
nice set of features operating on a project level without introducing external
dependencies (when feasible). For instance - finding project files has a
portable implementation written in pure Emacs Lisp without the use of GNU find
(but for performance sake an indexing mechanism backed by external commands
exists as well).

[[https://github.com/bbatsov/projectile][Bozhidar Batsov]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :hook
  (after-init . projectile-mode)
  :init
  (setq-default
   projectile-cache-file (expand-file-name ".projectile.cache" user-emacs-directory)
   projectile-known-projects-file (expand-file-name ".projectile.eld" user-emacs-directory))
  :custom
  (projectile-completion-system 'ivy)
  (projectile-enable-caching t)
  (projectile-track-known-projects-automatically nil))
#+END_SRC

** Quality of Life

Auto-indent code as you write.

#+BEGIN_QUOTE
=electric-indent-mode= is enough to keep your code nicely aligned when all you
do is type. However, once you start shifting blocks around, transposing lines,
or slurping and barfing sexps, indentation is bound to go wrong.

=aggressive-indent-mode= is a minor mode that keeps your code *always* indented.
It reindents after every change, making it more reliable than
electric-indent-mode.

[[https://github.com/Malabarba/aggressive-indent-mode][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :preface
  (defun me/aggressive-indent-mode-off ()
    (aggressive-indent-mode 0))
  :hook
  ((css-mode . aggressive-indent-mode)
   (emacs-lisp-mode . aggressive-indent-mode)
   (js-mode . aggressive-indent-mode)
   (lisp-mode . aggressive-indent-mode)
   (sgml-mode . aggressive-indent-mode))
  :custom
  (aggressive-indent-comments-too t)
  :config
  (add-to-list 'aggressive-indent-protected-commands 'comment-dwim))
#+END_SRC

Sort interactive commands by usage.

#+BEGIN_SRC emacs-lisp
(use-package amx
  :custom
  (amx-save-file (expand-file-name ".amx" user-emacs-directory))
  (amx-show-key-bindings nil))
#+END_SRC

Insert the current date. See [[#hydra--dates][Hydra / Dates]].

#+BEGIN_SRC emacs-lisp
(defun me/date-iso ()
  "Insert the current date, ISO format, eg. 2016-12-09."
  (interactive)
  (insert (format-time-string "%F")))

(defun me/date-iso-with-time ()
  "Insert the current date, ISO format with time, eg. 2016-12-09T14:34:54+0100."
  (interactive)
  (insert (format-time-string "%FT%T%z")))

(defun me/date-long ()
  "Insert the current date, long format, eg. December 09, 2016."
  (interactive)
  (insert (format-time-string "%B %d, %Y")))

(defun me/date-long-with-time ()
  "Insert the current date, long format, eg. December 09, 2016 - 14:34."
  (interactive)
  (insert (capitalize (format-time-string "%B %d, %Y - %H:%M"))))

(defun me/date-short ()
  "Insert the current date, short format, eg. 2016.12.09."
  (interactive)
  (insert (format-time-string "%Y.%m.%d")))

(defun me/date-short-with-time ()
  "Insert the current date, short format with time, eg. 2016.12.09 14:34"
  (interactive)
  (insert (format-time-string "%Y.%m.%d %H:%M")))
#+END_SRC

Adjust font size for all windows at once.

#+BEGIN_QUOTE
This package provides commands for increasing or decreasing the default font
size in all GUI Emacs frames -- it is like an Emacs-wide version of
=text-scale-mode=.

[[https://github.com/purcell/default-text-scale][Steve Purcell]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package default-text-scale)
#+END_SRC

Disable documentation for object at point in the echo area. It conflicts with Flycheck.

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :config (global-eldoc-mode -1))
#+END_SRC

Customize the noisy default towards backup files.

#+BEGIN_SRC emacs-lisp
(use-package files
  :ensure nil
  :custom
  (backup-by-copying t)
  (backup-directory-alist `(("." . ,(expand-file-name "backups/" user-emacs-directory))))
  (delete-old-versions t)
  (version-control t))
#+END_SRC

Add visual guides towards indenting levels.

#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :hook
  (python-mode . highlight-indent-guides-mode)
  (scss-mode . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guides-method 'character))
#+END_SRC

Highlight line under point.

#+BEGIN_SRC emacs-lisp
(use-package hl-line
  :ensure nil
  :preface (defun me/hl-line-mode-off () (setq-local global-hl-line-mode nil))
  :hook (after-init . global-hl-line-mode))
#+END_SRC

Augment Emacs' package menu.

#+BEGIN_QUOTE
Project for modernizing Emacs' Package Menu. With improved appearance, mode-line
information. Github integration, customizability, asynchronous upgrading, and
more.

[[https://github.com/Malabarba/paradox][Artur Malabarba]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package paradox
  :custom
  (paradox-column-width-package 27)
  (paradox-column-width-version 13)
  (paradox-execute-asynchronously t)
  (paradox-github-token t)
  (paradox-hide-wiki-packages t)
  :config
  (remove-hook 'paradox-after-execute-functions #'paradox--report-buffer-print))
#+END_SRC

Colorize colors as text with their value.

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook prog-mode
  :custom
  (rainbow-x-colors nil))
#+END_SRC

Turn on =auto-fill-mode= /almost/ everywhere.

#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :hook
  ((prog-mode . turn-on-auto-fill)
   (text-mode . turn-on-auto-fill)))
#+END_SRC

Display the available keybindings following your current input.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :hook
  (after-init . which-key-mode)
  (which-key-init-buffer . (lambda () (setq-local display-line-numbers nil)))
  :custom
  (which-key-add-column-padding 1)
  (which-key-separator " ")
  (which-key-sort-order 'which-key-prefix-then-key-order)
  (which-key-use-C-h-commands nil))
#+END_SRC

** Shell and Terminal

#+BEGIN_SRC emacs-lisp
(use-package em-banner
  :ensure nil
  :custom (eshell-banner-message ""))

(use-package em-hist
  :ensure nil
  :custom (eshell-hist-ignoredups t))

(use-package esh-mode
  :ensure nil
  :preface
  (defun me/eshell-bol-shifted ()
    "See `eshell-bol'. Support shift."
    (interactive "^")
    (eshell-bol))
  :bind
  (:map eshell-mode-map
        ([remap eshell-bol] . me/eshell-bol-shifted))
  :hook
  ((eshell-mode . me/hl-line-mode-off)
   (eshell-mode . (lambda () (setq-local scroll-margin 0))))
  :custom
  (eshell-scroll-to-bottom-on-input 'all)
  (eshell-scroll-to-bottom-on-output 'all))

(use-package esh-proc
  :ensure nil
  :custom (eshell-kill-processes-on-exit t))
#+END_SRC

Yes, Emacs emulates terminals too.

- **TODO**: Source =.bash_profile= on =M-x term=.

#+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :hook
  ((term-mode . me/hl-line-mode-off)
   (term-mode . (lambda () (setq-local scroll-margin 0)))))
#+END_SRC

Provide a way to invoke =bash= on Windows. This requires "Developer Mode" to
be enabled in the first place.

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'windows-nt)
  (defun me/bash ()
    (interactive)
    (let ((explicit-shell-file-name "C:/Windows/System32/bash.exe"))
      (shell))))
#+END_SRC

** Version Control

Magit provides Git facilities directly from within Emacs.

#+BEGIN_QUOTE
Magit is an interface to the version control system
[[https://git-scm.com/][Git]], implemented as an
[[https://www.gnu.org/software/emacs][Emacs]] package. Magit aspires to be a
complete Git porcelain. While we cannot (yet) claim that Magit wraps and
improves upon each and every Git command, it is complete enough to allow even
experienced Git users to perform almost all of their daily version control tasks
directly from within Emacs. While many fine Git clients exist, only Magit and
Git itself deserve to be called porcelains.
[[https://magit.vc/about.html][(more)]]

[[https://github.com/magit/magit][Jonas Bernoulli]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package git-commit
  :preface
  (defun me/git-commit-auto-fill-everywhere ()
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nil))
  :hook
  (git-commit-mode . me/git-commit-auto-fill-everywhere)
  :custom
  (git-commit-summary-max-length 50))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind
  (:map magit-hunk-section-map
        ("RET" . magit-diff-visit-file-other-window)
        ([return] . magit-diff-visit-file-other-window))
  :hook
  (magit-mode . (lambda () (setq-local display-line-numbers nil)))
  :custom
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  (magit-diff-highlight-hunk-body nil)
  (magit-diff-highlight-hunk-region-functions
   '(magit-diff-highlight-hunk-region-dim-outside magit-diff-highlight-hunk-region-using-face))
  (magit-module-sections-nested nil)
  (magit-popup-display-buffer-action '((display-buffer-same-window)))
  (magit-refs-show-commit-count 'all)
  (magit-section-initial-visibility-alist '((modules . show)
                                            (stashes . show)
                                            (unpulled . show)
                                            (unpushed . show)))
  (magit-section-show-child-count t)
  (transient-mode-line-format nil)
  :config
  (magit-add-section-hook
   'magit-status-sections-hook 'magit-insert-modules-overview 'magit-insert-status-headers t)
  (remove-hook 'magit-section-highlight-hook #'magit-section-highlight))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package gitattributes-mode)
(use-package gitconfig-mode)
(use-package gitignore-mode)
#+END_SRC

** Whitespaces

Highlight space-like characters, eg. trailing spaces, tabs, empty lines.

#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook
  ((prog-mode . whitespace-turn-on)
   (text-mode . whitespace-turn-on))
  :custom
  (whitespace-style '(face empty indentation::space tab trailing)))
#+END_SRC

-----

[[#dotemacs][Back to top]]
